# -*- coding: utf-8 -*-
"""Praktikum4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bw2RJ64NxuUExdUK1xpJztVSByw8r9Qk

1. Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    confusion_matrix, classification_report, RocCurveDisplay, ConfusionMatrixDisplay
)

"""2. Membaca data File CSV"""

# menghubungkan colab dengan google drive
from google.colab import drive
drive.mount('/content/drive')

"""3. Melihat informasi umum dataset"""

df.info()

df = pd.read_csv('//content/drive/MyDrive/Praktikum Machine Learning_Amaya Eshia_0110224102_Ai02/Praktikum 4/Data/stunting_wasting_dataset (1).csv')
df.head()

df.describe()

"""4. Data Pre-Processing

4.1 Cek Missing Value
"""

# Cek Missing Value
df.isnull().sum()

"""4.2 Cek Nilai Unik"""

df['Stunting'].unique()

df['Jenis Kelamin'].unique()

"""4.3 Mapping Kolom Kategorik ke Bentuk Numerik"""

# 1 - Mapping Kolom Stunting -> biner
map_stunt = {'Stunted': 1, 'Severely Stunted': 1, 'Normal': 0, 'Tall': 0}
df['Stunting_bin'] = df['Stunting'].map(map_stunt).astype('Int64')

# 2 - Mapping Kolom Jenis Kelamin ->
# Laki-laki = 1, Perempuan = 0
df['JK_bin'] = (df['Jenis Kelamin'] == 'Laki-Laki').astype(int)

print("Distribusi Stunting_bin:\n", df['Stunting_bin'].value_counts())
print("\nDistribusi JK_bin:\n", df['JK_bin'].value_counts())

# 1 - Mapping Kolom Stunting -> biner
map_stunt = {'Stunted': 1, 'Severely Stunted': 1, 'Normal': 0, 'Tall': 0}
df['Stunting_bin'] = df['Stunting'].map(map_stunt).astype('Int64')

# 2 - Mapping Kolom Jenis Kelamin ->
# Laki-laki = 1, Perempuan = 0
# 2 - Mapping Kolom Jenis Kelamin -> Laki-laki = 1, Perempuan = 0
df['JK_bin'] = (df['Jenis Kelamin'] == 'Laki-laki').astype(int)

print("Distribusi Stunting_bin:\n", df['Stunting_bin'].value_counts())
print("\nDistribusi JK_bin:\n", df['JK_bin'].value_counts())

"""4.4 Analisis Korelasi Antar Variabel Numerik"""

corr_matrix = df.corr(numeric_only=True)
corr_matrix

"""4.5 Visualisasi Heatmap Korelasi"""

# Visualisasi Heatmap

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap Korelasi Antar Variabel Numerik terhadap Stunting', fontsize=12)
plt.show

"""5. Pembagian Dataset (Training dan Testing)

5.1 Menentukan Fitur dan Target
"""

# Fitur Numerik dan Gender
feature_num = ['Umur (bulan)', 'Tinggi Badan (cm)', 'Berat Badan (kg)']
feature_bin = ['JK_bin']

# Gabungkan & Drop Missing
use_cols = feature_num + feature_bin + ['Stunting_bin']
df_model = df[use_cols].dropna().copy()

x = df_model[feature_num + feature_bin]
y = df_model['Stunting_bin']

print("X shape:", x.shape)
print("Y shape:", y.shape)

"""5.2 Membagi Dataset Menjadi Training dan Testing Test"""

X_train, X_test, y_train, y_test = train_test_split(
    x, y,
    test_size=0.2,
    random_state=42,
    stratify=y
)

print("Data latih:", X_train.shape)
print("Data uji:", X_test.shape)

"""6. Pembangunan Model Logistic Regression"""

# Scale hanya fitur numerik, gender langsung passthrough
from sklearn.linear_model import LogisticRegression
preprocess = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), feature_num),
        ('bin', 'passthrough', feature_bin)
    ],
    remainder='drop'
)

model = LogisticRegression(
    max_iter=1000,
    solver='lbfgs',
    class_weight='balanced',
    random_state=42
)

clf = Pipeline(
    steps=[
        ('preprocess', preprocess),
        ('model', model)
])

# Latih Model
clf.fit(X_train, y_train)
print("Model Logistic Regression berhasil dilatih.")

"""7. Prediksi Model dan Evaluasi Model"""

# Prediksi & probabilitas
y_pred = clf.predict(X_test)
y_prob = clf.predict_proba(X_test)[:, 1]

# Hitung metrik
print(f"Akurasi : {accuracy_score(y_test, y_pred):.4f}")
print(f"Precision {precision_score(y_test, y_pred, zero_division=0):.4f}")
print(f"Recall: {recall_score(y_test, y_pred, zero_division=0):.4f}")
print(f"F1-Score: {f1_score(y_test, y_pred, zero_division=0):.4f}")
print(f"ROC-AUC : {roc_auc_score(y_test, y_prob):.4f}")

"""8. Visualisasi Hasil Evaluasi"""

# Confusion Matrix
ConfusionMatrixDisplay (confusion_matrix(y_test, y_pred),
    display_labels=['Normal', 'Stunting']
    ).plot(values_format='d')
plt.title("Confusion Matrix")
plt.show()

# ROC Curve
RocCurveDisplay.from_estimator (clf, X_test, y_test)
plt.title("ROC Curve Logistic Regression")
plt.show()

"""9. Classification Report"""

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred, target_names=['Tidak Stunting (0)', 'Stunting (1)']))

"""10. Classification Report"""

from sklearn.model_selection import cross_val_score

# Lakukan cross validation (cv=5 berarti 5-fold)
scores = cross_val_score(clf, x, y, cv=5)

# Tampilkan Hasil
print("Skor tiap fold:", scores)
print("Rata-rata akurasi:", np.mean(scores))
print("Standar deviasi:", np.std(scores))

"""11. Interpretasi Model Logistic Regression"""

# Ambil nama fitur & koefisien
feat_names = feature_num + feature_bin
coefs = clf.named_steps['model'].coef_[0]
odds = np.exp(coefs)

coef_df = pd.DataFrame({
    'Fitur': feat_names,
    'Koefisien (log-odds)': coefs,
    'Odds Ratio (e^coef)': odds
}).sort_values('Odds Ratio (e^coef)', ascending=False)

display(coef_df)

"""12. Prediksi Data Baru (Contoh Kasus)"""

# Contoh 2 anak
data_baru = pd.DataFrame({
    'Umur (bulan)': [24, 10],
    'Tinggi Badan (cm)': [79.0, 72.5],
    'Berat Badan (kg)': [9.2, 7.8],
    'JK_bin': [1, 0] # 1=Laki-Laki, 0=Perempuan
})

pred = clf.predict(data_baru)
prob = clf.predict_proba(data_baru)[:,1]

hasil = data_baru.copy()
hasil['Prob_Stunting'] = prob
hasil['Pred (0=Tidak,1=Ya)'] = pred
display(hasil)

# Selesai Praktikum 4 nya