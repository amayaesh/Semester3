# -*- coding: utf-8 -*-
"""TugasMandiri4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sAxZ4hVHJN3mbyyIRfSIJ1esIXdycqN_

1. Import Library
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns # Import seaborn

from sklearn.model_selection import train_test_split, cross_val_score # Import cross_val_score
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression, LogisticRegression # Import LogisticRegression
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score, roc_auc_score,
    confusion_matrix, classification_report, RocCurveDisplay, ConfusionMatrixDisplay
)

"""2. Membaca File Dataset CSV"""

# menghubungkan colab dengan google drive
from google.colab import drive
drive.mount('/content/drive')

"""3. Melihat Informasi Umum Dataset"""

df = pd.read_csv('/content/drive/MyDrive/Praktikum Machine Learning_Amaya Eshia_0110224102_Ai02/Praktikum 4/Data/calonpembelimobil.csv')
df.head()

df.describe(
)

df.info()

"""4. Data Processing

4.1 Cek Missing Value
"""

# Cek Missing Value
df.isnull().sum()

"""4.2 Cek Nilai Unik"""

print("\nNilai unik di kolom 'Status':", df['Status'].unique())
print("Nilai unik di kolom 'Kelamin':", df['Kelamin'].unique())
print("Nilai unik di kolom 'Memiliki_Mobil':", df['Memiliki_Mobil'].unique())
print("Nilai unik di kolom 'Beli_Mobil':", df['Beli_Mobil'].unique())

df['Status'].unique()

df['Kelamin'].unique()

print(df.head())
print(df.columns)

"""4.3 Mapping Kolom Kategori ke Bentuk Numerik"""

# Hitung distribusi target
print("\nDistribusi Beli_Mobil:\n", df['Beli_Mobil'].value_counts())

"""4.4 Analisis Korelasi Antar Variabel Numerik"""

corr_matrix = df.corr(numeric_only=True)
corr_matrix

"""4.5 Visualisasi Heatmap Korelasi"""

import seaborn as sns

plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Heatmap Korelasi Antar Variabel Numerik', fontsize=12)
plt.show()

"""Pembagian Dataset (training dan Testing)

5.1. Menentukan Fitur dan Target
"""

feature_num = ['Usia', 'Penghasilan', 'Status', 'Kelamin', 'Memiliki_Mobil']
target_col = 'Beli_Mobil'

df_model = df[feature_num + [target_col]].dropna().copy()

x = df_model[feature_num]
y = df_model[target_col]

print("\nX shape:", x.shape)
print("Y shape:", y.shape)

"""5.2 Membagi Dataset Menjadi Training dan Testing Tesst"""

X_train, X_test, y_train, y_test = train_test_split(
    x, y,
    test_size=0.2,
    random_state=42,
    stratify=y
)

print("\nData latih:", X_train.shape)
print("Data uji:", X_test.shape)

"""6. Pembangunan Model Logistic Regression"""

# Scaling semua fitur karena semuanya numerik, tetapi perlu distandardisasi.
preprocess = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), feature_num)
    ],
    remainder='drop'
)

# Menggunakan class_weight='balanced' karena data target mungkin tidak seimbang (meskipun di sini tampaknya cukup seimbang 50/50).
model = LogisticRegression(
    max_iter=1000,
    solver='lbfgs',
    class_weight='balanced',
    random_state=42
)

clf = Pipeline(
    steps=[
        ('preprocess', preprocess),
        ('model', model)
])

# Latih Model
clf.fit(X_train, y_train)
print("\nModel Logistic Regression berhasil dilatih.")

"""7. Prediksi Model dan Evaluasi Model"""

# Prediksi & probabilitas
y_pred = clf.predict(X_test)
y_prob = clf.predict_proba(X_test)[:, 1]

# Hitung metrik
print("\nMetrik Evaluasi Model:")
print(f"Akurasi : {accuracy_score(y_test, y_pred):.4f}")
print(f"Precision : {precision_score(y_test, y_pred, zero_division=0):.4f}")
print(f"Recall: {recall_score(y_test, y_pred, zero_division=0):.4f}")
print(f"F1-Score: {f1_score(y_test, y_pred, zero_division=0):.4f}")
print(f"ROC-AUC : {roc_auc_score(y_test, y_prob):.4f}")

"""8. Visualisasi Hasil Evaluasi"""

# Confusion Matrix
ConfusionMatrixDisplay (confusion_matrix(y_test, y_pred),
    display_labels=['Tidak Beli (0)', 'Beli (1)']
    ).plot(values_format='d')
plt.title("Confusion Matrix")
plt.show()

# ROC Curve
RocCurveDisplay.from_estimator (clf, X_test, y_test)
plt.title("ROC Curve Logistic Regression")
plt.show()

"""9. Classification Report"""

print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=['Tidak Beli (0)', 'Beli (1)']))

"""10. Cross Validation"""

# Lakukan cross validation (cv=5 berarti 5-fold)
scores = cross_val_score(clf, x, y, cv=5, scoring='accuracy')

# Tampilkan Hasil
print("\nHasil Cross Validation (Akurasi):")
print("Skor tiap fold:", scores)
print("Rata-rata akurasi:", np.mean(scores))
print("Standar deviasi:", np.std(scores))

"""11. Interpretasi Model Logistic Regression"""

# Ambil nama fitur & koefisien
# Koefisien diambil dari model setelah proses scaling
scaled_features = clf.named_steps['preprocess'].get_feature_names_out()
coefs = clf.named_steps['model'].coef_[0]
odds = np.exp(coefs)

coef_df = pd.DataFrame({
    'Fitur': scaled_features,
    'Koefisien (log-odds)': coefs,
    'Odds Ratio (e^coef)': odds
}).sort_values('Odds Ratio (e^coef)', ascending=False)

# Rename kolom agar lebih rapih setelah scaling
coef_df['Fitur'] = coef_df['Fitur'].str.replace('num__', '')
display(coef_df)

"""12. Prediksi Data Baru (Contoh Kasus)"""

# Contoh 2 calon pembeli
data_baru = pd.DataFrame({
    'Usia': [55, 25],
    'Penghasilan': [350, 100],
    'Status': [2, 0], # 2=Menikah, 0=Belum Menikah
    'Kelamin': [0, 1], # 0=Perempuan, 1=Laki-Laki
    'Memiliki_Mobil': [2, 0] # Jumlah mobil yang dimiliki
})

pred = clf.predict(data_baru)
prob = clf.predict_proba(data_baru)[:,1]

hasil = data_baru.copy()
hasil['Prob_Beli_Mobil'] = prob
hasil['Pred (0=Tidak,1=Ya)'] = pred
display(hasil)

print("\nAnalisis Selesai.")

"""Kesimpulannya, calon pelanggan yang berusia 55 Tahun dengan status "Menikah" memiliki kemungkinan untuk membeli mobil sebesar 99.82%. Sementara, untuk calonpelanggan usia 25, memiliki kemungkinan untuk membeli mobil hanya sekitar 0.11%"""