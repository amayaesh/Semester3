# -*- coding: utf-8 -*-
"""Tugas Mandiri 2(Finish).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VQ3HiWxdmYADqhpkAp83iM-51F1HfXTv
"""

import pandas as pd

import numpy as np

# menghubungkan colab dengan google drive
from google.colab import drive
drive.mount('/content/drive')

# memanggil data set lewat gdrive
path = "/content/drive/MyDrive/Praktikum Machine Learning_Amaya Eshia_0110224102_Ai02/Praktikum ML 2"

# membaca file csv menggunakan pandas
import pandas as pd
df = pd.read_csv(path + "/Data/day.csv")

# memasukan dataset
df = pd.read_csv(path + "/Data/day.csv")
total_size = len(df)

# pembagian rasio sesuai soal
# Rasio akhir: Testing 20%, Validation 8%, Training 72%
RASIO_TESTING = 0.20
RASIO_VALIDATION = 0.10
RASIO_TRAINING = 0.80

# HITUNG JUMLAH BARIS
# Menggunakan np.ceil untuk memastikan pembulatan ke atas
jumlah_testing = int(np.ceil(total_size * RASIO_TESTING))
jumlah_validation = int(np.ceil(total_size * RASIO_VALIDATION))
# Jumlah Training adalah sisanya
jumlah_training = total_size - jumlah_testing - jumlah_validation

# 1. PEMBAGIAN DATA BERDASARKAN URUTAN INDEKS (TIDAK DIACAK)
# Perhatian: Pembagian ini mengasumsikan data sudah diacak atau tidak memiliki bias urutan.

# A. DATA TESTING (20%)
# Mengambil data 20% pertama dari dataset
df_test = df.iloc[:jumlah_testing]

# TAMPILKAN HASIL DATA TESTING
print("\n--- DATA TESTING (20% dari Total) ---")
print(f"Jumlah: {len(df_test)} baris")
print(df_test.head())

# B. DATA VALIDATION (8%)
# Mengambil data dari akhir Testing hingga batas Validation
start_val = jumlah_testing
end_val = jumlah_testing + jumlah_validation
df_validation = df.iloc[start_val : end_val]

# TAMPILKAN HASIL DATA VALIDATION
print("\n--- DATA VALIDATION (8% dari Total) ---")
print(f"Jumlah: {len(df_validation)} baris")
print(df_validation.head())

# C. DATA TRAINING (72%)
# Mengambil sisa data dari batas akhir Validation hingga akhir dataset
df_train = df.iloc[end_val:]

# TAMPILKAN HASIL DATA TRAINING
print("\n--- DATA TRAINING (72% dari Total) ---")
print(f"Jumlah: {len(df_train)} baris")
print(df_train.head())

"""# ========================================
# PEMBAGIAN DATA SESUAI REQUIREMENT
# ========================================
"""

# (c) Data Testing: 20% dari total dataset
RASIO_TESTING = 0.20
jumlah_testing = int(np.ceil(total_size * RASIO_TESTING))

# (a) Data Training: 80% dari total dataset (sisa setelah testing)
jumlah_training_awal = total_size - jumlah_testing

# (b) Data Validation: 10% dari data training
RASIO_VALIDATION = 0.10
jumlah_validation = int(np.ceil(jumlah_training_awal * RASIO_VALIDATION))

# Jumlah Training akhir setelah dikurangi validation
jumlah_training_akhir = jumlah_training_awal - jumlah_validation

print("=== RASIO PEMBAGIAN DATA ===")
print(f"Testing: 20% dari total = {jumlah_testing} baris")
print(f"Training awal: 80% dari total = {jumlah_training_awal} baris")
print(f"Validation: 10% dari training = {jumlah_validation} baris")
print(f"Training akhir: {jumlah_training_akhir} baris")
print(f"\nRasio akhir terhadap total:")
print(f"Testing: {(jumlah_testing/total_size)*100:.2f}%")
print(f"Validation: {(jumlah_validation/total_size)*100:.2f}%")
print(f"Training: {(jumlah_training_akhir/total_size)*100:.2f}%")
print("="*50)

"""# ========================================
# PEMBAGIAN DATA BERDASARKAN URUTAN
# ========================================
"""

# 1. DATA TESTING (20% pertama)
df_test = df.iloc[:jumlah_testing]

# 2. DATA TRAINING (80% sisanya, tapi nanti dipecah lagi)
# Ambil dari akhir testing sampai akhir dataset
df_training_temp = df.iloc[jumlah_testing:]

# 3. PECAH DATA TRAINING JADI VALIDATION DAN TRAINING
# Validation: 10% pertama dari data training
df_validation = df_training_temp.iloc[:jumlah_validation]

# Training akhir: sisanya
df_train = df_training_temp.iloc[jumlah_validation:]

"""# ========================================
# TAMPILKAN HASIL
# ========================================

"""

print("\n\n### DATA TESTING (20% dari Total) ###")
print(f"Jumlah: {len(df_test)} baris")
print("\n5 Baris Teratas:")
print(df_test.head())

print("\n\n### DATA VALIDATION (10% dari Training) ###")
print(f"Jumlah: {len(df_validation)} baris")
print("\n5 Baris Teratas:")
print(df_validation.head())

print("\n\n### DATA TRAINING (Sisanya) ###")
print(f"Jumlah: {len(df_train)} baris")
print("\n5 Baris Teratas:")
print(df_train.head())

"""# ========================================
# VERIFIKASI
# ========================================
"""

print("\n\n=== VERIFIKASI ===")
total_setelah_split = len(df_test) + len(df_validation) + len(df_train)
print(f"Total data awal: {total_size}")
print(f"Total setelah split: {total_setelah_split}")
print(f"Semua data ter-cover: {total_setelah_split == total_size}")

# df_test.to_csv("data_testing.csv", index=False)
# df_validation.to_csv("data_validation.csv", index=False)
# df_train.to_csv("data_training.csv", index=False)